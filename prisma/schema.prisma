// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TodoList {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("tudo_list")
}


model User {
  id          Int           @id @default(autoincrement())
  login       String        @unique
  email       String?  
  name        String
  password    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]
  comments    Comment[]
  commentLikes CommentLike[]
  postLikes   PostLike[]

}

model Post {
  id          Int           @id @default(autoincrement())
  message     String
  userId      Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime @updatedAt
  user        User          @relation(fields: [userId], references: [id])
  comments    Comment[]
  likes       PostLike[]

}

model Comment {
  id          Int           @id @default(autoincrement())
  message     String
  postId      Int
  userId      Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime @updatedAt
  post        Post          @relation(fields: [postId], references: [id])
  user        User          @relation(fields: [userId], references: [id])
  likes       CommentLike[]

}

model CommentLike {
  id          Int           @id @default(autoincrement())
  commentId   Int
  userId      Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime @updatedAt
  comment     Comment       @relation(fields: [commentId], references: [id])
  user        User          @relation(fields: [userId], references: [id])

  @@unique([commentId, userId])
}

model PostLike {
  id          Int           @id @default(autoincrement())
  postId      Int
  userId      Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime @updatedAt
  post        Post          @relation(fields: [postId], references: [id])
  user        User          @relation(fields: [userId], references: [id])

  @@unique([postId, userId])
}
